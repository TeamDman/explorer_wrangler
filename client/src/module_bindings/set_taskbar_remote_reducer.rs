// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::__lib;
use spacetimedb_sdk::__codegen::__sats;
use spacetimedb_sdk::__codegen::__ws;
use spacetimedb_sdk::__codegen::{self as __sdk};

use super::taskbar_remote_kind_type::TaskbarRemoteKind;

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub(super) struct SetTaskbarRemoteArgs {
    pub remote: TaskbarRemoteKind,
}

impl From<SetTaskbarRemoteArgs> for super::Reducer {
    fn from(args: SetTaskbarRemoteArgs) -> Self {
        Self::SetTaskbarRemote {
            remote: args.remote,
        }
    }
}

impl __sdk::InModule for SetTaskbarRemoteArgs {
    type Module = super::RemoteModule;
}

pub struct SetTaskbarRemoteCallbackId(__sdk::CallbackId);

#[allow(non_camel_case_types)]
/// Extension trait for access to the reducer `set_taskbar_remote`.
///
/// Implemented for [`super::RemoteReducers`].
pub trait set_taskbar_remote {
    /// Request that the remote module invoke the reducer `set_taskbar_remote` to run as soon as possible.
    ///
    /// This method returns immediately, and errors only if we are unable to send the request.
    /// The reducer will run asynchronously in the future,
    ///  and its status can be observed by listening for [`Self::on_set_taskbar_remote`] callbacks.
    fn set_taskbar_remote(&self, remote: TaskbarRemoteKind) -> __sdk::Result<()>;
    /// Register a callback to run whenever we are notified of an invocation of the reducer `set_taskbar_remote`.
    ///
    /// Callbacks should inspect the [`__sdk::ReducerEvent`] contained in the [`super::ReducerEventContext`]
    /// to determine the reducer's status.
    ///
    /// The returned [`SetTaskbarRemoteCallbackId`] can be passed to [`Self::remove_on_set_taskbar_remote`]
    /// to cancel the callback.
    fn on_set_taskbar_remote(
        &self,
        callback: impl FnMut(&super::ReducerEventContext, &TaskbarRemoteKind) + Send + 'static,
    ) -> SetTaskbarRemoteCallbackId;
    /// Cancel a callback previously registered by [`Self::on_set_taskbar_remote`],
    /// causing it not to run in the future.
    fn remove_on_set_taskbar_remote(&self, callback: SetTaskbarRemoteCallbackId);
}

impl set_taskbar_remote for super::RemoteReducers {
    fn set_taskbar_remote(&self, remote: TaskbarRemoteKind) -> __sdk::Result<()> {
        self.imp
            .call_reducer("set_taskbar_remote", SetTaskbarRemoteArgs { remote })
    }
    fn on_set_taskbar_remote(
        &self,
        mut callback: impl FnMut(&super::ReducerEventContext, &TaskbarRemoteKind) + Send + 'static,
    ) -> SetTaskbarRemoteCallbackId {
        SetTaskbarRemoteCallbackId(self.imp.on_reducer(
            "set_taskbar_remote",
            Box::new(move |ctx: &super::ReducerEventContext| {
                let super::ReducerEventContext {
                    event:
                        __sdk::ReducerEvent {
                            reducer: super::Reducer::SetTaskbarRemote { remote },
                            ..
                        },
                    ..
                } = ctx
                else {
                    unreachable!()
                };
                callback(ctx, remote)
            }),
        ))
    }
    fn remove_on_set_taskbar_remote(&self, callback: SetTaskbarRemoteCallbackId) {
        self.imp.remove_on_reducer("set_taskbar_remote", callback.0)
    }
}

#[allow(non_camel_case_types)]
#[doc(hidden)]
/// Extension trait for setting the call-flags for the reducer `set_taskbar_remote`.
///
/// Implemented for [`super::SetReducerFlags`].
///
/// This type is currently unstable and may be removed without a major version bump.
pub trait set_flags_for_set_taskbar_remote {
    /// Set the call-reducer flags for the reducer `set_taskbar_remote` to `flags`.
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    fn set_taskbar_remote(&self, flags: __ws::CallReducerFlags);
}

impl set_flags_for_set_taskbar_remote for super::SetReducerFlags {
    fn set_taskbar_remote(&self, flags: __ws::CallReducerFlags) {
        self.imp.set_call_reducer_flags("set_taskbar_remote", flags);
    }
}
