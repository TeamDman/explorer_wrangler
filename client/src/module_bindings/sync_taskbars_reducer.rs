// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::__lib;
use spacetimedb_sdk::__codegen::__sats;
use spacetimedb_sdk::__codegen::__ws;
use spacetimedb_sdk::__codegen::{self as __sdk};

use super::taskbar_type::Taskbar;

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub(super) struct SyncTaskbarsArgs {
    pub taskbars: Vec<Taskbar>,
}

impl From<SyncTaskbarsArgs> for super::Reducer {
    fn from(args: SyncTaskbarsArgs) -> Self {
        Self::SyncTaskbars {
            taskbars: args.taskbars,
        }
    }
}

impl __sdk::InModule for SyncTaskbarsArgs {
    type Module = super::RemoteModule;
}

pub struct SyncTaskbarsCallbackId(__sdk::CallbackId);

#[allow(non_camel_case_types)]
/// Extension trait for access to the reducer `sync_taskbars`.
///
/// Implemented for [`super::RemoteReducers`].
pub trait sync_taskbars {
    /// Request that the remote module invoke the reducer `sync_taskbars` to run as soon as possible.
    ///
    /// This method returns immediately, and errors only if we are unable to send the request.
    /// The reducer will run asynchronously in the future,
    ///  and its status can be observed by listening for [`Self::on_sync_taskbars`] callbacks.
    fn sync_taskbars(&self, taskbars: Vec<Taskbar>) -> __sdk::Result<()>;
    /// Register a callback to run whenever we are notified of an invocation of the reducer `sync_taskbars`.
    ///
    /// Callbacks should inspect the [`__sdk::ReducerEvent`] contained in the [`super::ReducerEventContext`]
    /// to determine the reducer's status.
    ///
    /// The returned [`SyncTaskbarsCallbackId`] can be passed to [`Self::remove_on_sync_taskbars`]
    /// to cancel the callback.
    fn on_sync_taskbars(
        &self,
        callback: impl FnMut(&super::ReducerEventContext, &Vec<Taskbar>) + Send + 'static,
    ) -> SyncTaskbarsCallbackId;
    /// Cancel a callback previously registered by [`Self::on_sync_taskbars`],
    /// causing it not to run in the future.
    fn remove_on_sync_taskbars(&self, callback: SyncTaskbarsCallbackId);
}

impl sync_taskbars for super::RemoteReducers {
    fn sync_taskbars(&self, taskbars: Vec<Taskbar>) -> __sdk::Result<()> {
        self.imp
            .call_reducer("sync_taskbars", SyncTaskbarsArgs { taskbars })
    }
    fn on_sync_taskbars(
        &self,
        mut callback: impl FnMut(&super::ReducerEventContext, &Vec<Taskbar>) + Send + 'static,
    ) -> SyncTaskbarsCallbackId {
        SyncTaskbarsCallbackId(self.imp.on_reducer(
            "sync_taskbars",
            Box::new(move |ctx: &super::ReducerEventContext| {
                let super::ReducerEventContext {
                    event:
                        __sdk::ReducerEvent {
                            reducer: super::Reducer::SyncTaskbars { taskbars },
                            ..
                        },
                    ..
                } = ctx
                else {
                    unreachable!()
                };
                callback(ctx, taskbars)
            }),
        ))
    }
    fn remove_on_sync_taskbars(&self, callback: SyncTaskbarsCallbackId) {
        self.imp.remove_on_reducer("sync_taskbars", callback.0)
    }
}

#[allow(non_camel_case_types)]
#[doc(hidden)]
/// Extension trait for setting the call-flags for the reducer `sync_taskbars`.
///
/// Implemented for [`super::SetReducerFlags`].
///
/// This type is currently unstable and may be removed without a major version bump.
pub trait set_flags_for_sync_taskbars {
    /// Set the call-reducer flags for the reducer `sync_taskbars` to `flags`.
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    fn sync_taskbars(&self, flags: __ws::CallReducerFlags);
}

impl set_flags_for_sync_taskbars for super::SetReducerFlags {
    fn sync_taskbars(&self, flags: __ws::CallReducerFlags) {
        self.imp.set_call_reducer_flags("sync_taskbars", flags);
    }
}
