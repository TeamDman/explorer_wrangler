// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::__lib;
use spacetimedb_sdk::__codegen::__sats;
use spacetimedb_sdk::__codegen::__ws;
use spacetimedb_sdk::__codegen::{self as __sdk};

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub(super) struct UpdateTaskbarArgs {
    pub id: __sdk::Identity,
    pub width: u32,
    pub height: u32,
    pub x: i32,
    pub y: i32,
}

impl From<UpdateTaskbarArgs> for super::Reducer {
    fn from(args: UpdateTaskbarArgs) -> Self {
        Self::UpdateTaskbar {
            id: args.id,
            width: args.width,
            height: args.height,
            x: args.x,
            y: args.y,
        }
    }
}

impl __sdk::InModule for UpdateTaskbarArgs {
    type Module = super::RemoteModule;
}

pub struct UpdateTaskbarCallbackId(__sdk::CallbackId);

#[allow(non_camel_case_types)]
/// Extension trait for access to the reducer `update_taskbar`.
///
/// Implemented for [`super::RemoteReducers`].
pub trait update_taskbar {
    /// Request that the remote module invoke the reducer `update_taskbar` to run as soon as possible.
    ///
    /// This method returns immediately, and errors only if we are unable to send the request.
    /// The reducer will run asynchronously in the future,
    ///  and its status can be observed by listening for [`Self::on_update_taskbar`] callbacks.
    fn update_taskbar(
        &self,
        id: __sdk::Identity,
        width: u32,
        height: u32,
        x: i32,
        y: i32,
    ) -> __sdk::Result<()>;
    /// Register a callback to run whenever we are notified of an invocation of the reducer `update_taskbar`.
    ///
    /// Callbacks should inspect the [`__sdk::ReducerEvent`] contained in the [`super::ReducerEventContext`]
    /// to determine the reducer's status.
    ///
    /// The returned [`UpdateTaskbarCallbackId`] can be passed to [`Self::remove_on_update_taskbar`]
    /// to cancel the callback.
    fn on_update_taskbar(
        &self,
        callback: impl FnMut(&super::ReducerEventContext, &__sdk::Identity, &u32, &u32, &i32, &i32)
            + Send
            + 'static,
    ) -> UpdateTaskbarCallbackId;
    /// Cancel a callback previously registered by [`Self::on_update_taskbar`],
    /// causing it not to run in the future.
    fn remove_on_update_taskbar(&self, callback: UpdateTaskbarCallbackId);
}

impl update_taskbar for super::RemoteReducers {
    fn update_taskbar(
        &self,
        id: __sdk::Identity,
        width: u32,
        height: u32,
        x: i32,
        y: i32,
    ) -> __sdk::Result<()> {
        self.imp.call_reducer(
            "update_taskbar",
            UpdateTaskbarArgs {
                id,
                width,
                height,
                x,
                y,
            },
        )
    }
    fn on_update_taskbar(
        &self,
        mut callback: impl FnMut(&super::ReducerEventContext, &__sdk::Identity, &u32, &u32, &i32, &i32)
            + Send
            + 'static,
    ) -> UpdateTaskbarCallbackId {
        UpdateTaskbarCallbackId(self.imp.on_reducer(
            "update_taskbar",
            Box::new(move |ctx: &super::ReducerEventContext| {
                let super::ReducerEventContext {
                    event:
                        __sdk::ReducerEvent {
                            reducer:
                                super::Reducer::UpdateTaskbar {
                                    id,
                                    width,
                                    height,
                                    x,
                                    y,
                                },
                            ..
                        },
                    ..
                } = ctx
                else {
                    unreachable!()
                };
                callback(ctx, id, width, height, x, y)
            }),
        ))
    }
    fn remove_on_update_taskbar(&self, callback: UpdateTaskbarCallbackId) {
        self.imp.remove_on_reducer("update_taskbar", callback.0)
    }
}

#[allow(non_camel_case_types)]
#[doc(hidden)]
/// Extension trait for setting the call-flags for the reducer `update_taskbar`.
///
/// Implemented for [`super::SetReducerFlags`].
///
/// This type is currently unstable and may be removed without a major version bump.
pub trait set_flags_for_update_taskbar {
    /// Set the call-reducer flags for the reducer `update_taskbar` to `flags`.
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    fn update_taskbar(&self, flags: __ws::CallReducerFlags);
}

impl set_flags_for_update_taskbar for super::SetReducerFlags {
    fn update_taskbar(&self, flags: __ws::CallReducerFlags) {
        self.imp.set_call_reducer_flags("update_taskbar", flags);
    }
}
